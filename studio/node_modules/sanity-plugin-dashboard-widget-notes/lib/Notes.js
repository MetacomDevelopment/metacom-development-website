"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _md = require("react-icons/md");

var _parseISO = _interopRequireDefault(require("date-fns/parseISO"));

var _formatDistance = _interopRequireDefault(require("date-fns/formatDistance"));

var _format = _interopRequireDefault(require("date-fns/format"));

var _polished = require("polished");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _Notes = _interopRequireDefault(require("./Notes.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Notes extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "UNSAFE_componentWillMount", () => {
      _client.default.createIfNotExists({
        _id: 'dashboard.note',
        _type: 'dashboardNote',
        notes: ''
      });
    });

    _defineProperty(this, "componentDidMount", () => {
      _client.default.getDocument('dashboard.note').then(_ref => {
        var _updatedAt = _ref._updatedAt,
            notes = _ref.notes;
        this.setState({
          _updatedAt,
          notes,
          draftNotes: notes
        });
      });

      this.unsubscribe();
      this.subscription = _client.default.listen("*[_id == 'dashboard.note']").subscribe(_ref2 => {
        var result = _ref2.result;
        var _updatedAt = result._updatedAt,
            notes = result.notes;
        this.setState({
          _updatedAt,
          notes,
          draftNotes: notes
        });
      });
    });

    _defineProperty(this, "handleChange", e => {
      this.setState({
        draftNotes: e.target.value,
        isCreatingDraft: true
      });
    });

    _defineProperty(this, "handleSubmit", () => {
      var draftNotes = this.state.draftNotes;
      this.setState({
        isSaving: true
      });

      _client.default.patch('dashboard.note').set({
        notes: draftNotes
      }).commit().then(updatedDocument => {
        this.setState({
          _updatedAt: updatedDocument._updatedAt,
          // eslint-disable-line no-underscore-dangle
          notes: draftNotes,
          isCreatingDraft: false,
          isSaving: false
        });
      }).catch(err => {
        this.setState({
          isSaving: false
        });
        console.error('Oh no, the update failed: ', err.message); // eslint-disable-line no-console
      });
    });

    _defineProperty(this, "handleDiscard", () => {
      var notes = this.state.notes;
      this.setState({
        draftNotes: notes,
        isCreatingDraft: false
      });
    });

    _defineProperty(this, "componentWillUnmount", () => {
      this.unsubscribe();
    });

    _defineProperty(this, "unsubscribe", () => {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    });

    this.state = {
      _updatedAt: null,
      notes: '',
      draftNotes: '',
      isCreatingDraft: false,
      isSaving: false
    };
  }

  render() {
    var _this$state = this.state,
        error = _this$state.error,
        _updatedAt = _this$state._updatedAt,
        draftNotes = _this$state.draftNotes,
        isCreatingDraft = _this$state.isCreatingDraft,
        isSaving = _this$state.isSaving;
    var _this$props = this.props,
        title = _this$props.title,
        placeholder = _this$props.placeholder,
        backgroundColor = _this$props.backgroundColor,
        color = _this$props.color;
    var textColor = color || (0, _polished.readableColor)(backgroundColor, 'rgb(48, 48, 48)');
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _Notes.default.container
    }, isSaving && /*#__PURE__*/_react.default.createElement("div", {
      className: _Notes.default.spinnerContainer
    }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true,
      message: "Saving notes\u2026"
    })), /*#__PURE__*/_react.default.createElement("header", {
      className: _Notes.default.header,
      style: {
        backgroundColor: (0, _polished.shade)(0.05, backgroundColor),
        color: textColor
      }
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: _Notes.default.title
    }, title, /*#__PURE__*/_react.default.createElement(_md.MdSpeakerNotes, {
      className: _Notes.default.headerIcon,
      style: {
        fill: textColor
      }
    }), _updatedAt && /*#__PURE__*/_react.default.createElement("span", {
      title: (0, _format.default)((0, _parseISO.default)(_updatedAt), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
    }, "Edited ".concat((0, _formatDistance.default)((0, _parseISO.default)(_updatedAt), new Date(), {
      addSuffix: true
    }))))), error ? /*#__PURE__*/_react.default.createElement("div", {
      className: _Notes.default.content,
      style: {
        backgroundColor
      }
    }, /*#__PURE__*/_react.default.createElement("code", null, "Could not load notes \u2026")) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: _Notes.default.content,
      style: {
        backgroundColor
      }
    }, /*#__PURE__*/_react.default.createElement("textarea", {
      spellCheck: "false",
      className: _Notes.default.textarea,
      name: "notes",
      value: draftNotes,
      onChange: this.handleChange,
      placeholder: placeholder,
      style: {
        color: textColor
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: _Notes.default.footer,
      style: {
        borderTopColor: (0, _polished.shade)(0.05, backgroundColor)
      }
    }, /*#__PURE__*/_react.default.createElement(_default2.default, {
      bleed: true,
      color: "primary",
      kind: "simple",
      onClick: this.handleSubmit,
      disabled: !isCreatingDraft
    }, "Save notes"), /*#__PURE__*/_react.default.createElement(_default2.default, {
      bleed: true,
      color: "danger",
      kind: "simple",
      onClick: this.handleDiscard,
      disabled: !isCreatingDraft
    }, "Discard changes"))));
  }

}

Notes.propTypes = {
  title: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  backgroundColor: _propTypes.default.string,
  color: _propTypes.default.string
};
Notes.defaultProps = {
  title: 'Notes',
  placeholder: 'â€¦',
  backgroundColor: '#ffff88',
  color: null
};
var _default = Notes;
exports.default = _default;
//# sourceMappingURL=Notes.js.map